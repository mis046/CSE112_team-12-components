const jjProgress=()=>{const a=document.createElement("template");a.innerHTML=`
    <style>
    @import url("https://unpkg.com/element-ui/lib/theme-chalk/progress.css");

    .el-progress {
      position: relative;
      font-family: var(--text-font, Helvetica, Arial, sans-serif);
      width: var(--progress-width, 100%);
      margin: 0 auto;
    }

    .el-progress-bar__outer {
      background-color: var(--bar-outer-color, #ebeef5);
    }

    .el-progress-bar__inner {
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      background-color: var(--bar-color, #409EFF);
      text-align: right;
      border-radius: 100px;
      line-height: 1;
      white-space: nowrap;
      transition: width .6s;
    }
    
    .el-progress__text {
      color: var(--progress-text-color, #606266);
      display: inline-block;
      vertical-align: middle;
      margin-left: 10px;
      line-height: 1;
    }

    </style>
    <div role="progressbar" aria-valuemin="0" aria-valuemax="100" 
        aria-orientation="horizontal" class="el-progress el-progress--line" 
        aria-valuetext="0" aria-label="progress between 0 and 100">

      <div class="el-progress-bar">
        <div class="el-progress-bar__outer" style="height: 6px;">
          <div class="el-progress-bar__inner" style="width: 10%"></div>
        </div>
      </div>
      <div class="el-progress__text" style="font-size: 14.4px"></div>
    </div> 
  `;class JJProgress extends HTMLElement{constructor(){super(),this.DEFAULT_PERCENTAGE=50,this.DEFAULT_MIN=0,this.DEFAULT_MAX=100,this.DEFAULT_STROKE_WIDTH=6,this._min=this.DEFAULT_MIN,this._max=this.DEFAULT_MAX,this.root=this.attachShadow({mode:"open"}),this.root.appendChild(a.content.cloneNode(!0)),this.progressContainer=this.root.querySelector(".el-progress"),this.progressBar=this.root.querySelector(".el-progress-bar"),this.progressBarOuter=this.root.querySelector(".el-progress-bar__outer"),this.progressBarInner=this.root.querySelector(".el-progress-bar__inner"),this.progressBarText=this.root.querySelector(".el-progress__text"),this.getCurrentPosition=this.getCurrentPosition.bind(this)}connectedCallback(){console.debug("in connectedCallback"),this.hasAttribute("percentage")?(this._percentage=this.percentage,console.log("this._percentage",this._percentage)):(console.log("setting default percentage to",DEFAULT_PERCENTAGE),this._percentage=DEFAULT_PERCENTAGE),this.hasAttribute("color")?(this.progressBarInner.style.backgroundColor=this.getAttribute("color"),this.progressBarInner.style.borderColor=this.getAttribute("color")):this.color="#409EFF",this.strokeWidth=this.hasAttribute("stroke-width")?this.getAttribute("stroke-width"):DEFAULT_STROKE_WIDTH,console.debug("Setting strokeWidth to ",this.strokeWidth),this.progressBarOuter.style.height=this.strokeWidth+"px",this.type=this.hasAttribute("type")?this.getAttribute("type"):"line",this.updateProgressPosition(),this.updatePercentageText()}updatePercentageText(){console.debug("in updatePercentageText");let a=""+this._percentage+"%";console.debug("Updating percentage text to",a),this.progressBarText.innerText=a}getCurrentPosition(){return 100*((this._percentage-this._min)/(this._max-this._min))+"%"}updateProgressPosition(){console.debug("in updateProgressPosition");const a=100*((this._percentage-this._min)/(this._max-this._min));this.progressBarInner.style.width=a+"%"}static get observedAttributes(){return["percentage","stroke-width","type","color"]}attributeChangedCallback(a,b,c){switch(console.debug("in attributeChangedCallback for",a),a){case"percentage":0>this.percentage?(this._percentage=0,console.debug("bad percentage, using",this._percentage)):100<this.percentage&&(this._percentage=100,console.debug("bad percentage, using",this._percentage)),this.updateProgressPosition(),this.updatePercentageText();break;case"type":break;case"stroke-width":this.strokeWidth=this.getAttribute("stroke-width"),this.progressBarOuter.style.height=this.strokeWidth+"px";break;case"color":}}get percentage(){return this.getAttribute("percentage")}get color(){return this.getAttribute("color")}set percentage(a){this.percentage=a}set color(a){this.color=a}}customElements.define("jj-progress",JJProgress)};jjProgress();